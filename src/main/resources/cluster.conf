app-name = "fp-api-server"
kamon {
  environment.service = "node-1"
  environment.service = ${?NODE_NAME}
  apm.api-key = "g8kjecgstehsf8t4k60el1usuc"
}
akka {
  loglevel = INFO
  actor {
    provider = cluster
    serialization-bindings {
      // list your trait for serialize down below
      "sample.CborSerializable" = jackson-cbor
    }
  }
  remote.artery {
    canonical {
      hostname = "127.0.0.1"
      hostname = ${?CANONICAL_HOST}
      port = 2551
      port = ${?CANONICAL_PORT}
    }
  }
  cluster {
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
    shutdown-after-unsuccessful-join-seed-nodes = 120s
    sharding {
      least-shard-allocation-strategy.rebalance-absolute-limit = 20
    }
    seed-nodes = [
      "akka://"${app-name}"@127.0.0.1:2551",
      //      "akka://"${app-name}"@127.0.0.1:2552",
      //      "akka://"${app-name}"@127.0.0.1:2553"
    ]
  }
  management {
    cluster.bootstrap.contact-point-discovery {
      service-name = "cluster"
      discovery-method = config
      # boostrap filters ports with the same IP assuming they are previous instances running on the same node
      # unless a port is specified
      port-name = "management"
      required-contact-point-nr = 1
      # config service discovery never changes
      stable-margin = 1 ms
      # bootstrap without all the nodes being up
      contact-with-all-contact-points = false
    }
    http {
      hostname = "127.0.0.1"
      hostname = ${?MANAGE_HOST}
      port = 8558
      port = ${?MANAGE_PORT}
    }
  }
}